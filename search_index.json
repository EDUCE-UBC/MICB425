[["index.html", "Gene-centric mapping of microbial community structure and function 2020.21 MICB425 Mirobial Ecological Genomics Capstone project Overview", " Gene-centric mapping of microbial community structure and function 2020.21 MICB425 Mirobial Ecological Genomics Capstone project Stephan Koenig, Kim Dill-McFarland, Connor Morgan-Lang, Ryan McLaughlin, Julia Anstett, Resmi Radhamony, Sean Crowe and Steven Hallam version March 26, 2021 Overview This document introduces bioinformatics workflows useful in gene-centric mapping of functional and phylogenetic anchors encoded in microbial genomes sourced from natural and engineered environments. Part I outlines the motivation and insights afforded by the use of these workflows to study uncultivated microbial community structure and function. Part II provides hands-on tutorials to learn two effective tools for gene-centric analysis, TreeSAPP and iTOL. Part III described your capstone project to explore primary metagenomic and metatranscriptomic data collected from the Saanich Inlet water column spanning a defined nutrient and energy gradient. "],["exploring-the-microcosmos.html", "1 Exploring the microcosmos 1.1 Background 1.2 Using multi-omic data to reconstruct distributed networks of metabolite exchange 1.3 TreeSAPP", " 1 Exploring the microcosmos 1.1 Background We live in a world dominated by microbial life. Accounting for bacteria and archaea (prokaryotes) alone, an estimated 1030 cells occupy the biosphere. For most of Earth’s history, this microcosmos has been driving matter and energy transformations through distributed networks of metabolite exchange resulting in global biogeochemical cycles and symbiotic interactions that create and sustain the conditions of multicellular existence, including our own. Recent advances in high-throughput sequencing and mass spectrometry platforms have enabled us to develop more quantitative insights into these networks’ structure and function at the individual, population, and community levels of biological organization. The resulting data sets have revealed both incredible diversity and ecological resilience and provided an opportunity to develop predictive models and sustainable biotechnologies with the potential to transform the way humans interact with the natural world and one another. Despite the power and the promise of this new perception, we exist dangerously close to upsetting the planetary boundaries that have promoted successful human expansion over the past 20,000 years. Global climate change is one manifestation of the cost we have paid in our pursuit of material and energy resources. Still, there are others, including biodiversity loss through habitat destruction, rampant pollution, and imbalances in integral element cycling of nitrogen and phosphorous. Given the increasing availability of data sets describing microbial community structure and function in the world around us, we have an opportunity to learn from this information using bioinformatic tools and approaches. For this course, we will focus on one manifestation of climate change-related to dissolved oxygen (DO) loss in the ocean using a model ecosystem as a source of multi-omic (DNA and RNA) and geochemical parameter information over space and time. Oxygen minimum zones (OMZs) are widespread areas of low DO in subsurface waters. Climate change resulting in increased stratification and reduced oxygen solubility in warming waters leads to OMZ expansion. Consequently, as oxygen levels decline, the microbial communities inhabiting OMZ waters shift their metabolisms to utilize alternative terminal electron acceptors. This shift results in the production of climate-active trace gases such as nitrous oxide (N2O) and methane (CH4). Specifically, we will study the effects of changing oxygen levels on communities of bacteria and archaea inhabiting the Saanich Inlet water column. Saanich Inlet, situated on the coast of Vancouver Island, British Columbia, is a seasonally anoxic fjord that provides a biodynamic perspective on OMZ expansion. From a systems ecology perspective, OMZs provide useful environmental contexts in which to study coupled biogeochemical cycling through distributed metabolic networks, especially the integration of the carbon, nitrogen and sulphur cycles. By combining multi-omics and geochemical parameter information from OMZs, it becomes possible to evaluate microbial communities’ regulatory and response dynamics to changing DO levels. For example, because OMZs are hotspots for nitrogen loss processes reconstructing the nitrogen cycle as a distributed metabolic process can shed new insight into microbial controls on matter and energy transformations integral to ocean health and climate balance. Genes encoding key steps in the nitrogen cycle are well defined (Figure 1.1), providing a basis for functional anchor screening to determine their distribution across the Tree of Life. FIGURE 1.1: Nitrogen cycle 1.2 Using multi-omic data to reconstruct distributed networks of metabolite exchange The nitrogen cycle is just one aspect of the distributed metabolic network that defines microbial interaction space. Throughout this capstone project, you will have the opportunity to explore this space using a gene-centric approach. This approach is based on identifying and quantifying phylogenetic or functional anchor genes that represent key microbial players and metabolic pathways in the system under study. In a big picture sense, we want to use these data to answer three foundational questions concerning microbial community structure and function: Who is there? What are they doing? How do they respond to change? Biological information flow can be described as a process of converting genotypic information encoded in the DNA base pairs of the genome transcribed into RNA messages that are translated into proteins at the level of the ribosome. These proteins, in turn, go on to catalyze metabolic transformations and regulatory dynamics that ultimately give rise to phenotypic expression, adaptation and response. This flow of information is formally referred to as the Central Dogma of Biology. Genomic sequence information provides a basis for determining the types of microorganisms present in a sample and inferring metabolic potential at the individual, population and community levels of biological organization. Because DNA can persist in the environment for longer than RNA or protein, we can also use the abundance of gene X or gene Y to tell us about prior metabolic activity, e.g. gene abundance is a proxy for the process. We can use gene abundance information in numerical models to infer metabolic flux through a given pathway because the abundance of gene X is proportional to genome replication in which it resides. Genomic information is also more robust to sampling noise as we collect and process samples for downstream analysis. For information on gene-centric modelling incorporating DNA, RNA and protein information in Saanich Inlet, see this paper (1). While genomic information tells us about metabolic potential, the transcriptome guides action or gene expression. To a certain extent, we can use this information to identify who is there, but more often, to indicate which pathways are active at the time of sampling. Transcriptomic data can open a window into response patterns along environmental gradients with the caveat that its short-lived nature is less robust to sampling noise. The presence of transcripts for a given gene X is no guarantee for their conversion into protein. However, because prokaryotes couple transcription to translation, we typically infer a direct relationship. For information on relationships between DNA, RNA and protein in Saanich Inlet, see this paper as well (2). 1.3 TreeSAPP For this project, you will be implementing a software application called Tree-based Sensitive and Accurate Protein Profiler (TreeSAPP) (3). Given the current set of reference packages available, you are in a position to reconstruct key steps in selected biogeochemical cycles, e.g. carbon, nitrogen or sulphur, along defined redox gradients in Saanich Inlet. TreeSAPP takes either metagenomic or metatranscriptomic reads and aligns them to reference packages representing phylogenetic or functional anchor genes of interest. These reference packages are constructed from trusted sources and consist of a phylogenetic tree, multiple sequence alignment, hidden Markov model and taxonomic lineage information. Reference packages can be updated and refined as new sequence information becomes available, including isolate reference genomes, metagenome-assembled genomes (MAGs) and single-cell amplified genomes (SAGs), thereby improving the precision of taxonomic placement. TreeSAPP outputs can be readily visualized using the interactive Tree of Life (iTOL) (4) or plotted in R to make beautiful and informative data visualization products. "],["a-tutorial-for-using-treesapp.html", "2 A tutorial for using TreeSAPP 2.1 Introduction and goals 2.2 A typical TreeSAPP workflow 2.3 Genes for creating reference packages 2.4 Tools 2.5 Data", " 2 A tutorial for using TreeSAPP 2.1 Introduction and goals In this series of tutorials, users will analyze a gene family lacking an existing TreeSAPP reference package (refpkg). You will work through a typical workflow of TreeSAPP both with an example gene (XmoA) to familiarize yourself with the tools, and then you will repeat the steps with a gene assigned to your group for which no reference package exists. You will document your efforts for the new reference package in Problem Set 5. 2.2 A typical TreeSAPP workflow Acquiring golden data. Creating a Reference Package For TreeSAPP. [Classifying unknown sequences with TreeSAPP and updating a reference package]. Calculating relative abundance of meta’omic data. 2.3 Genes for creating reference packages 2.3.1 XmoA The protein family we will be focusing on is that of the copper-containing membrane-bound monooxygenases (5). This family contains particulate methane monooxygenase (pMMO) and ammonia monooxygenase (AMO) and well be building a reference package for the alpha subunits of these enzymes called XmoA. All students will work through this example individually. 2.3.2 Group-assigned genes You will create a reference package and perform the other steps only for the gene that has been assigned to you. RefPkg refpkg_code Full Protein Name Pathway Cycle TIGRFAM PFam EggNOG Other Database EC number Reading cbbS C0003 ribulose bisphosphate carboxylase, type III (Ribulose bisphosphate carboxylase small chain) Carbon fixation C TIGR03326 PF00101 COG4451 NA 4.1.1.39 NA ACoA C0004 ACoA_crb (acetylCoA carboxylase) Carbon fixation C TIGR03182 PF00676 COG1071 NA 1.2.4.1 NA Hzs N0701 hydrazine synthase Annamox N NA PF18582 COG3391 NA 1.7.2.7 https://www.nature.com/articles/nature10453 https://www.frontiersin.org/articles/10.3389/fmars.2019.00027/full NirB N0201 nitrite reductase (NADH) large subunit Dissimilitory nitrate reduction (DNRA) N TIGR02374 NA COG1251 NA 1.7.1.15 NA NirD N0202 nitrite reductase (NADH) small subunit Dissimilitory nitrate reduction (DNRA) N TIGR02378 NA COG2146 NA 1.7.1.15 NA NrfA N0203 nitrite reductase (cytochrome c-552) Dissimilitory nitrate reduction (DNRA) N TIGR03152 NA COG3303 NA 1.7.2.2 NA NrfH N0204 cytochrome c nitrite reductase, small subunit Dissimilitory nitrate reduction (DNRA) N TIGR03153 NA COG3005 NA 1.7.2.2 NA APS_red S0101 adenylylsulfate reductase, thioredoxin dependent Sulfur metabolism S TIGR02055 PF01507 COG1404 NA 1.8.99.2 NA BacRho P0102 Bacteriorhodopsin Energy production and conversion NA NA PF01036 COG5524 NA NA https://science.sciencemag.org/content/289/5486/1902/tab-pdf https://www.nature.com/articles/s41467-018-07840-4 2.4 Tools 2.4.1 Shell Please use this short Shell cheat sheet for commonly used commands and review previous tutorials on Canvas. 2.4.2 TreeSAPP Tree-based Sensitive and Accurate Phylogenetic Profiler (TreeSAPP) (3) can be found on GitHub including an excellent wiki with additional information on each of the treesapp subcommands. 2.4.3 iTOL Interactive Tree Of Life (iTOL) (4) is a browser-based tool that allows you to visualize data generated in TreeSAPP as a phylogenetic tree with additional annotations. 2.5 Data Other than The Saanich Inlet data set already located on the server, you will download data from different databases: FunGene, the functional gene pipeline and repository. EggNOG "],["acquiring-golden-data.html", "3 Acquiring golden data 3.1 The golden standard 3.2 What databases can I retrieve sequences from? 3.3 XmoA example 3.4 Alternative sources 3.5 Data access hazards 3.6 Validation", " 3 Acquiring golden data Golden data in the context of biological sequence analysis are those that come from well-curated open-source databases. These data have been used to create all TreeSAPP reference packages to date, and they should be used to create all future reference packages. But what does “well-curated” mean, and how can you identify data that would meet this gold standard? 3.1 The golden standard The field of genomics is blessed with an abundance of reference data. In fact, it is not uncommon for biologists and bioinformaticians alike to gripe over the increased run-time of computational analyses caused by steps that include comparisons to such large reference databases. Not all of these data are, however, of the same quality. The vast majority have been automatically curated using algorithms with known shortcomings, and only a small portion have been manually curated with verified functional characterization. These latter data are the ones we consider well-curated or golden. More details on choosing databases for retrieving sequences can be found on the TreeSAPP wiki. 3.2 What databases can I retrieve sequences from? One of the most comprehensive and reputable biological sequence databases is SwissProt. The protein sequences curated within SwissProt can be accessed and downloaded through the UniProt Knowledgebase by selecting “Swiss-Prot” under the “UniProtKB” panel on the left of the landing page. You can submit queries for a protein family through their search bar and add filters to the query using their advanced search options. For example, you can search for reviewed RuBisCO sequences by entering the query ‘rubisco taxonomy:“Bacteria [2]” AND reviewed:yes’. Throughout the development of TreeSAPP, I have frequented FunGene, the functional gene pipeline and repository. This database provides curated sequences (of varying reliability) for many popular functional and taxonomic anchor genes. FunGene is also great since they have profile hidden Markov models (HMMs) for every gene available. In bioinformatics, HMMs are commonly used to represent a group of homologous amino acid sequences, often belonging to the same protein family, as a probabilistic model. They are inferred by modelling the amino acid character frequencies and motifs along the length of multiple aligned sequences. Additionally, by providing a sense of the full-length protein, they allow users to filter the sequences based on the percentage of an HMM covered. Since we’re building a reference tree, only include roughly full-length sequences by setting that minimum HMM coverage parameter between 60 and 90%. EggNOG is another source of curated orthologous groups. The breadth of families available here is astounding and more often than not they do have the sequences you’re looking for. There are a couple of benefits to accessing data from EggNOG. The first is they use a common identifier format. Using the correct identifier for a protein family, a single search will yield all available amino acid sequences belonging to that protein family or COG. What I’ve found handy is first looking for the Clusters of Orthologous Gene (COG) identifier on NCBI’s Conserved Domains database. Then I’d use that identifier to search for the sequences I’m interested in on EggNOG. The second benefit is the quality of their automated annotation pipeline. With every version of EggNOG, the entire set of protein sequences is clustered and the orthologous groups are defined de novo. This prevents incorrect legacy annotations from propagating to new sequences. Unfortunately, the breadth of taxa covered by EggNOG is limited to just 5,090 organisms. In many cases, this is good enough to build a “seed” reference package, especially if you’re building a reference package of a well-conserved—or housekeeping—gene. Yet, there are plenty of scenarios where the number of sequences downloaded is just too few for your objective, and a more comprehensive reference package is required—more on that below. In addition to these general and all-encompassing databases, there are smaller curated databases that are independently maintained. These tend to be gene- or function-specific and, as long as they’re still maintained, highly reliable. Perhaps the most notable of these is the Carbohydrate Active enZYmes (CAZy) database. The maintainers of CAZy constantly screen new sequenced from GenBank and sort any hits into different families based on their putative biochemical characterization. 3.3 XmoA example To show you how to access these data, we will download the alpha subunit sequences of the enzymes particulate methane monooxygenase (PmoA) and ammonia monooxygenase (AmoA) that are used in the treesapp create tutorial from the FunGene and EggNOG databases. 3.3.1 FunGene First, navigate to http://fungene.cme.msu.edu/. This front page organizes the genes into their respective functional groups. The sequences we’re interested in are involved in biogeochemical cycling, so look under that panel for “AmoA” and “PmoA”. As you can see, AmoA are broken up into four different entries: “amoA_AOA”, “amoA_AOB”, “amoA_AOB_like”, and “amoA_comammox”. We will download the sequences from only “amoA_AOA” and “amoA_AOB”, so let’s begin alphabetically with “amoA_AOA”. For these sequences, we will limit them to just sequences derived from isolate genomes of which the functional and taxonomic annotations are more reliable. To do this, go to “Display Options” in the top right. Click the “Isolate” option then “Update”. We also want the sequences that are more-or-less full-length. Click on “Show/Hide filter options”, fill the “Minimum HMM Coverage” parameter with “80” (or some other number between 60 and 90), then “Filter”. That’s all the filtering we’re going to do here. To add the sequences to your cart, click “Select All Sequences” then “Begin Analysis”. Deselect “Aligned” then click the “Download” button. Repeat with the above steps with the other genes “amoA_AOB” and “PmoA”. 3.3.2 EggNOG Go to the EggNOG website at http://eggnog5.embl.de/#/app/home and search for either “ENOG5028JPK” or “arCOG08676” in the search bar at the top of the page. These EggNOG ortholog identifiers correspond to PmoA/AmoA from Bacteria and AmoA from Archaea, respectively. In the image below, we’ve searched for “ENOG5028JPK”. Click “Download” at the bottom-left of the panel and select “All XX sequences (FASTA)”, where XX is the number of sequences belonging to the orthologous group (OG). This will open a new window with all sequences from that OG in FASTA format. Download this file to a file on your computer following the format &lt;OG name&gt;_EggNOGv5.faa where &lt;OG name&gt; is the EggNOG ortholog identifier. Repeat the above steps with the other EggNOG identifier. 3.3.3 Copying data onto the server On your computer: Create a new directory called Xmoa_sequences inside of your home directory by using a file browser, i.e. File Explorer (Windows 10) or Finder (macOS). Place any reference sequences in Xmoa_sequences that you identified and downloaded from the databases. Next, connect to your personal server using the terminal app, i.e. Windows Terminal (Windows 10) or Terminal (macOS). ssh root@&lt;server address&gt; On the server: Move to the directory /data (if it is not your working directory already), create a new directory called ts_tutorial and then move into it. cd /data/ mkdir ts_tutorial cd ts_tutorial On your computer: Open a second terminal window that is connected to your local computer, then copy the reference sequences from your computer to your server. scp -r &lt;path to Xmoa_sequences&gt; root@&lt;server address&gt;:/data/ts_tutorial 3.4 Alternative sources EggNOG and FunGene are my favourite sources, though this leaves out the majority of biological sequence databases for no reason other than simplicity. IMG, KEGG, PFam, and other similar databases are all great but they lack an API to retrieve lineage information, and therefore this needs to be provided in a separate table. Details on this table’s format and how to provide it can be found under the treesapp create wiki page. 3.5 Data access hazards Accessing the fraction of well-curated data from multiple databases is not trivial. Perhaps the most obvious reason for this are unrelated genes with shared names. For example, the gene product of mcrB in E. coli widely refers to 5-methylcytosine-specific restriction enzyme B, but in the Archaea, it would refer to the beta subunit of methyl-coenzyme M reductase—a completely unrelated protein. This is an inevitability in a field of science as broad as biology, where scientists that are responsible for naming genes cannot possibly be aware of all gene names in circulation. Another issue can be genes or proteins with synonyms, making the search for these data more complex. In these cases, you may need to search multiple databases with several queries in order to access all the sequences belonging to the same protein family. 3.6 Validation There are a number of quality control measures that can be taken to ensure the functional characteristics are as expected. 3.6.1 Basic BLAST: The first method for validating a set of candidate reference sequences could be to use the web-based Basic Local Alignment Search Tool available through the NCBI. Submit a FASTA file containing your sequences to Protein BLAST (blastp) with an appropriate database. To further reduce the processing time, you can restrict the reference sequences to specific taxa or use different algorithms. One thing to note is the query size limit - blastp will accept only FASTA files containing fewer than 100,000 characters. So, it is a good idea to take a representative sample or cluster the sequences before submitting the job. EggNOG-mapper: If you didn’t download your query sequences from the EggNOG database, a good resource to check your sequences is EggNOG mapper. It will annotate your query sequences against the EggNOG database and serve the result in several formats. 3.6.2 Advanced Phylogenetic inference: Try building a phylogeny from the candidate reference sequences and see whether there are any anomolously long branches between clades. hmmsearch across PFam database: Got some time to kill? Try aligning your candidate reference sequences to all profile HMMs in the PFam database! This will need to be done on the command-line and you will need to download Pfam-A.hmm.gz from the PFam ftp site. "],["treesapp-create.html", "4 Creating a reference package for TreeSAPP 4.1 Making the reference package 4.2 Testing the purity of the reference package 4.3 Viewing the reference package tree with iTOL 4.4 Update the reference package with new sequences 4.5 Annotate clades 4.6 Annotate clades 4.7 Reclassify and layer annotations onto classification table 4.8 Use your group’s reference package to classify unkown sequences then update your package", " 4 Creating a reference package for TreeSAPP 4.1 Making the reference package In the Acquiring golden data tutorial, PmoA &amp; AmoA sequences were downloaded from TIGRFAM, EggNOG, and FunGene. For now we’ll just use the TIGRFAM seed sequences and EggNOG sequences as these are best curated. Let’s call this our seed reference package. The steps involved are: All steps are executed on the server unless stated otherwise!! Connect to your personal server and continue to work in the /data/ts_tutorial directory. cd /data/ts_tutorial Optional: If you could not download the reference sequences of XmoA yourself (see Acquiring golden data), download xmoa_file_list.txt—a list of the necessary fasta files—with wget to the ts_tutorial directory, then run wget again to retrieve each file within this list. cd /data/ts_tutorial wget https://raw.githubusercontent.com/hallamlab/TreeSAPP/master/docs/xmoa_file_list.txt wget -i xmoa_file_list.txt Create the input FASTA file by combining the EggNOG and TIGRFAM reference into a single file using cat. cat stands for concatentate, i.e. the files are pasted together. The output of cat is funneled with the &gt; symbol to a &lt;new file&gt;, i.e. cat &lt;file 1&gt; &lt;file 2&gt; &gt; &lt;new file&gt; cat ENOG5028JPK_EggNOGv5.faa TIGR03080.faa arCOG08676_EggNOGv5.faa &gt; XmoA_seed.faa There are 76 well curated PmoA and AmoA fasta sequences in this file. Let’s look briefly at the newly generated fasta file. less XmoA_seed.faa You will notice, that they are lines that start with a &gt; that gives the name of a sequence followed by a line containing the actual nucleotide sequence itself. We can count and confirm the number of sequences in the fasta file by counting those &gt; using grep. grep is an incredibly powerful tool to find matching text patterns (using a format called “regular expression”) and is beyond the scope of this tutorial. The code below searches for a &gt; at the beginning of the line (defined with \"^&gt;\") of the file XmoA_seed.faa and counts each occurrence due to the option -c. grep -c &quot;^&gt;&quot; XmoA_seed.faa Use submodule treesapp create to build the XmoA reference package with different arguments (see visualization of the create workflow). To speed things along, we will use FastTree to infer the phylogeny and will skip bootstrapping with --fast. To remove potential redundant sequences, we will cluster the candidate reference sequences at 97% similarity using the argument -p. When clustering the candidate sequences TreeSAPP would normally ask which sequence to use for the representative of the cluster. This can be handy in cases when some sequences are better annotated and/or are especially important. To speed things up even more, the flag --headless will prevent these requests. This command will take ~2 minutes to complete. treesapp create \\ --fast \\ --headless \\ --overwrite \\ --cluster \\ --trim_align \\ -n 4 \\ -m prot \\ -p 0.97 \\ --fastx_input XmoA_seed.faa \\ -c XmoA \\ --output XmoA_seed The final reference package file is located in XmoA_seed/final_outputs/XmoA_build.pkl. This file contains all the individual components of a reference package (multiple sequence alignment, profile HMM, phylogenetic tree, taxonomic lineages) as well as some other data. These files were bundled up using the joblib Python library. They can be accessed individually using the submodule treesapp package. Replace the current refpkg_code Z1111 with unique identifier N0102. treesapp package edit \\ refpkg_code N0102 \\ --overwrite \\ --refpkg_path XmoA_seed/final_outputs/XmoA_build.pkl We can also modify the reference package’s description while we’re here. treesapp package edit \\ description &quot;Alpha subunits of copper membrane monooxygenase enzymes&quot; \\ --overwrite \\ --refpkg_path XmoA_seed/final_outputs/XmoA_build.pkl 4.2 Testing the purity of the reference package We will determine whether there were any mis-annotated sequences that were included in our reference package with treesapp purity. To do this, we take a well-curated database and attempt to classify sequences in it using treesapp assign. The results are then analysed and displayed for the user to evaluate. The TIGRFAM database is fairly comprehensive, representing 4488 different groups in version 15, and by using just the TIGRFAM seed sequences (TIGRFAM_seed_named.faa) we can be fairly sure we won’t be evaluating our classifications with mis-annotated sequences. treesapp purity \\ --trim_align \\ -m prot \\ -n 4 \\ -r XmoA_seed/final_outputs/XmoA_build.pkl \\ --extra_info TIGRFAM_info.tsv \\ -i TIGRFAM_seed_named.faa \\ --output XmoA_purity The important bit of the output should look like this Summarizing assignments for reference package XmoA Ortholog Hits Leaves Tree-coverage Description -------------------------------------------------------------------------------- TIGR03080 3 4 11.1 methane monooxygenase/ammonia monooxygenase, subunit A From this summary it appears that the reference package classified three homologous sequences that were placed at leaf nodes in the tree (i.e. they’re closely related) and the sequences were all from the family “TIGR03080”, also known as “methane monooxygenase/ammonia monooxygenase, subunit A”. In all, we are probably good to proceed! 4.3 Viewing the reference package tree with iTOL We have now created a phylogenetic tree for XmoA, but if we would visualize it, we would only see TreeSAPP identifiers (such as 1_XmoA, 2_XmoA) as labels on the tree which by themselves are not meaningful. In order to assign leaf labels to the refpkg iTOL tree, we will use the treesapp assign function. Assign reference sequences to reference package to generate tree with labels. treesapp assign \\ -n 4 \\ -m prot \\ --trim_align \\ --refpkg_dir XmoA_seed/final_outputs/ \\ --fastx_input XmoA_seed.faa \\ --output XmoA_seed_assign/ ``` The `treesapp assign` output directory (defined by the flag `--output`, i.e. in this case `XmoA_seed_assign`) contains the `iTOL_output` directory. - **On your computer:** Transfer `XmoA_seed_assign/iTOL_output` from the server to your local directory `Xmoa_sequences`. ```bash scp -r root@&lt;server address&gt;:/data/ts_tutorial/XmoA_seed_assign/iTOL_output &lt;path to Xmoa_sequences&gt; ``` We can quickly and easily view the sequences placed on the phylogeny using iTOL. We will do this by uploading the JPlace file produced by TreeSAPP. This JPlace file contains both the phylogeny and the location of the placements that will be visualized. - Navigate to &lt;https://itol.embl.de/&gt; using a web browser and sign in using the group&#39;s username and password. - Upload the file `XmoA_complete_profile.jplace`. You can do this using either your computer&#39;s file browser then navigating to the `iTOL_output` directory and clicking-and-dragging the file, or iTOL&#39;s file uploader---the &quot;Upload tree files&quot; button. - Next, navigate to the page displaying the phylogeny and click-and-drag the file `XmoA_labels.txt` from your file browser into the iTOL window. This should convert the TreeSAPP identifiers (e.g. 1_XmoA) to more useful descriptions with the organism name and accession for each leaf node. - Finally, turn on the &quot;Phylogenetic Placements&quot; dataset (right of the screen) and the figure should look identical to this figure below Figure \\@ref(fig:xmoa). ![(\\#fig:xmoa) Phylogenetic tree of XmoA_seed refpkg. The red bubbles represent sequence placements with the size of the bubble indicating the number of placements on a branch. 76 sequences were classified and placed on 36 leaf nodes. ](images/XmoA_seed_iTOLtree.svg) ## Building your group&#39;s reference package Now we have covered the first steps of creating a reference package for TreeSAPP and visualizing the outputs. Adapt and repeat the steps for [Acquiring golden data] and creating the reference package (this chapter) for the gene assigned to your group using your **group&#39;s** server. 1) **On your computer:** create a directory `&lt;gene_name_sequences&gt;` in your home directory and download any reference sequences for your gene you can find on the databases. 1) **On the server:** In the directory `/data`, create a new directory `&lt;gene name&gt;`. 1) **On your computer:** Copy the reference sequences from your computer to the directory `/data/&lt;gene name&gt;` on the server. 1) **On the server:** Work in `/data/&lt;gene name&gt;` as you are creating your TreeSAPP referenc package and outputs. 1) **On your computer:** Whenever you have TreeSAPP outputs that can be visualized with iTOL, copy the files from the server to your computer to do so. &lt;!--chapter:end:treesapp_create.Rmd--&gt; # Classifying unknown sequences with TreeSAPP and updating a reference package ## Introduction and Goals We will be using the new particulate methane monooxygenase (pMMO) and ammonia monooxygenase (AMO) alpha subunit, or XmoA, reference package and update it with XmoA amino acid sequences sourced from FunGene. You already created the reference package ([Creating a Reference Package For TreeSAPP]) and downloaded the sequences ([Acquiring golden data]). There are three goals of this tutorial: 1) Learn how to update a TreeSAPP reference package with `treesapp update`. 1) Learn how to use `treesapp colour` to colour a phylogeny in iTOL. 1) Learn how to annotate features of phylogenetic clades using `treesapp layer`. The first step involves using `treesapp assign` to classify the FunGene XmoA sequences. The second step is to use `treesapp update` to add the new sequences to the original XmoA reference package. ## Classify new sequences Before we can begin using TreeSAPP, we must log onto the server and make sure we&#39;re in the same directory as all our data. ```bash cd /data/ts_tutorial/ According to treesapp purity in the last chapter, and all other sanity checks, the XmoA reference package (contained in your working directory, /data/ts_tutorial, at XmoA_seed/final_outputs/XmoA_build.pkl) looks functional and only contains XmoA sequences. At this point, you’re able to use this reference package to classify sequences in any dataset using treesapp assign. The command treesapp assign is perhaps the most popular command and is described in detail on the TreeSAPP wiki. For these commands we will use Block Mapping and Gathering with Entropy (BMGE) which filters out regions of questionable homology from the alignment (6). Please see the BMGE publication for more information. To trim the multiple sequence alignments prior to phylogenetic placement use the --trim_align flag. To use the PmoA and AmoA reference package we’ve built instead of any other reference packages that come with TreeSAPP we can use the argument --refpkg_dir with the path to a directory containing reference packages we want to use. As usual, if you’re unclear as to what any arguments are, you can use treesapp assign -h to get the complete usage and descriptions of each argument. 4.3.1 Classifying amino acid sequences We’re first going to classify PmoA and AmoA sequences sourced from FunGene. The sequences are from genomes of isolated bacteria and archaea and, because of FunGene’s quality annotation pipeline, can likely be trusted. Environmental sequences (i.e. those from metagenomes and amplicon studies) have been excluded as they’re more difficult to determine what organism they’re from, and so the taxonomic labels are less trustworthy. treesapp assign \\ -n 4 \\ -m prot \\ --trim_align \\ --refpkg_dir XmoA_seed/final_outputs/ \\ --fastx_input p_amoA_FunGene9.5_isolates_C65S300_uclust99.faa \\ --output p_amoA_FunGene9.5_isolates_assign/ The command should take a few seconds to run and if you see a ‘TreeSAPP has finished successfully.’ at the end then you’re good to move on. 4.3.2 Classifying ORFs predicted from genomes The second batch of sequences that we will classify XmoA from are metagenome-assembled genomes (MAGs). MAGs are derived from assembled metagenome datasets (i.e. contigs or scaffolds) and represent the genome of a closely related microbial population. You can think of them as representing a single strain present in a microbial community. We will need to download two files: the FASTA file containing the genomes and a table with the taxonomic label for each genome. wget https://raw.githubusercontent.com/EDUCE-UBC/MICB425/main/data/SI072_MAGs.fa ./ wget https://raw.githubusercontent.com/EDUCE-UBC/MICB425/main/data/SI072_MAGs_gtdbtk.bac120.summary.tsv ./ The first file was created by concatenating twelve different MAGs into a single file and prepending each sequence name (i.e. header) with the MAG name using the software seqkit. Concatenating multiple genomes into a single file saves time since you only need to run treesapp assign once instead of classifying each MAG individually. Prepending the header with its respective MAG name is necessary to properly map the names of the query sequences back to their original genome names during the update process. Here is the shell command used (do not run): for f in *fa do mag_name=$( basename $f | sed &#39;s/.fa//g&#39; ) cat $f | seqkit replace -p &quot;^&quot; -r &quot;${mag_name}_&quot; &gt;&gt;SI072_MAGs.fa done The treesapp assign command we use is very similar from those we’ve used in the past. The main difference is we do not need to include -m prot as TreeSAPP assumes the input is comprised of nucleotide sequences by default. treesapp assign \\ -n 4 \\ --trim_align \\ --refpkg_dir XmoA_seed/final_outputs/ \\ --fastx_input SI072_MAGs.fa \\ --output SI072_MAGs_assign/ This command should take less than a minute to complete. 4.4 Update the reference package with new sequences The initial XmoA_seed reference package was pretty small with just 36 sequences (information was retrieved using treesapp package view num_seqs -r XmoA_seed/final_outputs/XmoA_build.pkl). Also, there were only bacterial sequences included in this version and we know there are archaeal ammonia oxidizers too. Let’s see if we can expand on this seed reference package using the sequences from FunGene. 4.4.1 Updating with publicly available sequences You have already seen many of these flags and arguments before, and they’re used again here just to remind TreeSAPP that we want results fast. A couple of new ones are used, though. treesapp update won’t take just any old FASTA file but relies on the outputs produced by treesapp assign. So we’ll guide it to the relevant output directory with --treesapp_output p_amoA_FunGene9.5_isolates_assign/. From there, it will figure out what sequences were classified and what their assigned lineages were. By default TreeSAPP will use the lineage that was assigned to each classified query sequence from the treesapp assign outputs. Since these sequences are from FunGene (and originally GenBank) they have NCBI accessions, meaning we can use this information to download their true taxonomic lineages. To turn on that behaviour we use the --skip_assign flag. Lastly, we must give it the path to the reference package to update with --refpkg_path XmoA_seed/final_outputs/XmoA_build.pkl. treesapp update \\ --fast \\ --headless \\ --overwrite \\ --delete \\ --cluster \\ --trim_align \\ -n 4 \\ -m prot \\ --fastx_input XmoA_seed.faa \\ --output XmoA_FunGene_update/ \\ --skip_assign \\ --treesapp_output p_amoA_FunGene9.5_isolates_assign/ \\ --refpkg_path XmoA_seed/final_outputs/XmoA_build.pkl It looks like 28 new sequences were introduced into the reference package, bringing the total to 63 sequences! And judging from the taxonomic rank summary printed during runtime both Archaea and Bacteria are now included: Number of unique lineages: root 1 domain 2 phylum 5 class 6 order 10 family 13 genus 25 species 38 4.5 Annotate clades 4.5.1 Updating with MAG sequences We are now going to update the reference package that we just updated using the MAG sequences to demonstrate how to iteratively update reference packages. A key difference between using sequences accessioned in the NCBI and here is we must provide the taxonomic labels for each MAG. The MAGs were assigned taxonomic labels using the Genome Taxonomy Database toolkit (GTDB-tk)(7). We first need to reformat the table containing the taxonomic labels of the MAGs. We will employ the shell functions awk and sed to pull out the two columns we need and find-and-replace words and characters. awk -F&quot;\\t&quot; &#39;{ OFS=&quot;\\t&quot;; print $1,$2 }&#39; SI072_MAGs_gtdbtk.bac120.summary.tsv | \\ sed &#39;s/user_genome/Organism/g&#39; | \\ sed &#39;s/classification/Lineage/g&#39; | \\ sed &#39;s/;/; /g&#39; &gt;gtdb_classifications.tsv Now that we have everything we need we can proceed to run treesapp update to add the MAG sequences to the reference package. treesapp update \\ --fast \\ --headless \\ --overwrite \\ --delete \\ --cluster \\ --trim_align \\ -n 4 \\ -m prot \\ --fastx_input XmoA_seed.faa \\ --output XmoA_MAG_update/ \\ --skip_assign \\ --seqs2lineage gtdb_classifications.tsv \\ --treesapp_output SI072_MAGs_assign/ \\ --refpkg_path XmoA_FunGene_update/final_outputs/XmoA_build.pkl One of the XmoA sequences from the MAGs should have been added to the reference package bringing the total to 64 reference sequences. A summary of the reference package will have been printed to the screen if treesapp update completed properly, and it should look like this: Summary of the updated reference package: ReferencePackage instance of XmoA (N0102): Molecule type: &#39;prot&#39; TreeSAPP version: &#39;0.10.1&#39; Profile HMM length: &#39;247&#39; Substitution model used for phylogenetic inference: &#39;LG+G4&#39; Number of reference sequences (leaf nodes): 64 Software used to infer phylogeny: &#39;FastTree&#39; Date of last update: &#39;2021-03-22&#39; Description: &#39;Alpha subunits of copper membrane monooxygenase enzymes&#39; For supplementary reading on how to integrate sequences from SAGs and MAGs into reference packages please visit the TreeSAPP Wiki. Just to finish this off, let’s map the PmoA and AmoA sequences from FunGene onto the MAG-updated reference package with treesapp assign to view later. treesapp assign \\ -n 4 \\ -m prot \\ --trim_align \\ --refpkg_dir XmoA_MAG_update/final_outputs/ \\ --fastx_input p_amoA_FunGene9.5_isolates_C65S300_uclust99.faa \\ --output p_amoA_FunGene9.5_isolates_update_assign/ 4.6 Annotate clades Protein families vary in their evolutionary complexity; many, especially genes involved in scavenging and metabolizing nutrients, have often been involved in some gene duplication and/or lateral gene transfer event while others have remained anchored to their host. Moreover, closely related enzymes can vary in their activities and it is often valuable, though not necessary, to annotate such features. Creating your own annotations involves scouring the literature to identify the phenotypes associated with each organism or taxon. For example, you would need to determine what paralogs or substrates are used by each organism in the reference package. Often though, these phenotypes are conserved across larger taxonomic groups, such as whole genera, families, orders, etc. If you are not familiar with the evolution of a protein family it may be helpful to find reference sequences for the activity, function, or other feature you’re interested in and place them on the tree with treesapp assign. Then, guided by these sequences, it should be easier to annotate the clades. Seeing as a literature review can’t be accomplished within the time span of this tutorial, you can use the annotations already created for the XmoA reference package. wget https://raw.githubusercontent.com/hallamlab/RefPkgs/master/Nitrogen_metabolism/Nitrification/XmoA/XmoA_taxonomy-phenotype_map.tsv You can view the contents of this file with the Unix command less: less XmoA_taxonomy-phenotype_map.tsv d__Archaea AmoA_AOA Methylococcaceae EmoA g__Haliea EmoA f__Nitrosomonadaceae AmoA_AOB o__Chromatiales AmoA_AOB g__Methylobacter PmoA g__Methylacidiphilum PmoA To create a file compatible with iTOL you will need to convert the taxonomy-phenotype mapping file with treesapp colour. treesapp colour \\ -r XmoA_MAG_update/final_outputs/XmoA_build.pkl \\ -o XmoA_colours/ \\ -n Function \\ --taxa_map XmoA_taxonomy-phenotype_map.tsv The two output files—XmoA_Function_colours_style.txt and XmoA_Function_colour_strip.txt—can be used to bring colour to the JPlace file in iTOL and also be used for adding phenotype-level annotations to the classification table with treesapp layer. Let’s make copies of the two text files in XmoA_colours/ into the AmoA_assign/iTOL output directory and transfer them to &lt;path to Xmoa_sequences&gt;. cp -r XmoA_colours p_amoA_FunGene9.5_isolates_update_assign/iTOL_output/ On your computer: Transfer XmoA_seed_assign/iTOL_output from the server to your local directory Xmoa_sequences. scp -r root@&lt;server address&gt;:/data/ts_tutorial/p_amoA_FunGene9.5_isolates_update_assign/iTOL_output &lt;path to Xmoa_sequences&gt; Navigate to https://itol.embl.de/ using a web browser and sign in using the group’s username and password. Upload the file XmoA_complete_profile.jplace. You can do this using either your computer’s file browser then navigating to the iTOL_output directory and clicking-and-dragging the file, or iTOL’s file uploader—the “Upload tree files” button. Next, navigate to the page displaying the phylogeny and click-and-drag the file XmoA_labels.txt from your file browser into the iTOL window. This should convert the TreeSAPP identifiers (e.g. 1_XmoA) to more useful descriptions with the organism name and accession for each leaf node. The two files XmoA_Function_colours_style.txt and XmoA_Function_colour_strip.txt can be dragged into the iTOL browser window to bring colour to the XmoA tree. The figure should look identical to Figure 4.1 FIGURE 4.1: XmoA phylogeny after functional annotation Finally, turn on the “Phylogenetic Placements” dataset (right of the screen). 4.7 Reclassify and layer annotations onto classification table With the clade colours file in the tutorial directory, it is now simple to assign each of the classified query sequences to its respective functional guild with treesapp layer. treesapp layer \\ --colours_style XmoA_colours/XmoA_Function_colours_style.txt \\ --refpkg_dir XmoA_MAG_update/final_outputs/ \\ --treesapp_output p_amoA_FunGene9.5_isolates_update_assign/ The output of this command is p_amoA_FunGene9.5_isolates_update_assign/final_outputs/extra_annotated_marker_contig_map.tsv. It contains an extra column for the functional annotations but is otherwise identical to the original marker_contig_map.tsv file. You can view the first 10 lines by using the Unix command head: head p_amoA_FunGene9.5_isolates_update_assign/final_outputs/extra_annotated_marker_contig_map.tsv 4.8 Use your group’s reference package to classify unkown sequences then update your package Continue to work with your group’s reference package in the directory /data/&lt;gene name&gt;. Visualize the appropriate outputs with iTOL. "],["calculating-relative-abundance-of-metaomic-data.html", "5 Calculating relative abundance of meta’omic data 5.1 Introduction and goals 5.2 Workflow description 5.3 Usage 5.4 Outputs 5.5 Tutorial steps 5.6 Use your group’s reference package to calculate abundances", " 5 Calculating relative abundance of meta’omic data 5.1 Introduction and goals Genome assemblies contain less information than the sequence reads and recovering it is not always possible. The shotgun DNA sequencing technique samples subsequences from the genomes that comprise a microbial community. Sequencing bias, while present, is subtle enough that we can assume that each subsequence’s frequency in the reads approximates its abundance in the underlying community. Whenever a (meta)genome is assembled from reads, however, sequences that are tricky to assemble (due to repetitive motifs or low coverage) are removed and the abundance information is effectively lost. One way to recover these read-level abundances is by aligning the reads back to the contigs and calculating the number of reads that mapped to each. One can go a step further still and use relative abundance normalization measures popular in transcriptomics, such as fragments per kilobase per million mappable reads (FPKM) or transcripts per million (TPM) (8). TreeSAPP’s subcommand abundance is capable of calculating FPKM or TPM for all classified query sequences. These can be derived from the reads in the FASTQ files of multiple different samples. This is only possible when the input fasta are nucleotide sequences from which ORFs were predicted within the pipeline (i.e. this thisn’t possible with amino acid sequences). The goal of this tutorial is to show you how to use treesapp abundance to calculate TPM for metagenome-derived ORF sequences. 5.2 Workflow description The workflow employed by TreeSAPP is common to many bioinformatics pipelines: Collect nucleotide sequences for the classified ORFs. BWA (9) creates an index from these nucleotide sequences - this will be the reference database. Align the short reads to the reference database with BWA MEM. Calculate the relative abundance metrics. TreeSAPP uses samsum. There are potentially two common use cases for treesapp abundance. Through treesapp assign where a single sample’s read data are mapped to its corresponding assembly (i.e. contigs or scaffolds) and the relative abundances of these sequences are obtained. A combined assembly was generated from multiple samples, classified with treesapp assign, then the reads of each sample were mapped individually to generate sample-specific relative abundance values with treesapp abundance. 5.3 Usage There are two required arguments for treesapp abundance: treesapp_output: Path to the output directory from treesapp assign. reads: Path to a FASTQ file containing single-end reads, or foward mates or interleaved reads from a paired-end sequencing library. Below are descriptions for the most important options: reverse: Path to a FASTQ file containing reverse mates from a paired-end sequencing library. report: This argument controls what treesapp abundance does with the resulting abundance values. The ‘nothing’ option is most applicable to the Python API, and is used by treesapp assign to simply return the abundance object instances. ‘update’ can be used when the abundance values in the classification table should be replaced with these newly calculated values. ‘append’ should be used when reads of new samples are being used to calculate abundance (e.g. reads from a time-course experiment). metric: Either Fragments per Kilobase per Mllion mappable reads (FPKM) or Transcripts per Million (TPM). 5.4 Outputs The sole output of treesapp abundance is an edited classification table, previously generated by treesapp assign. No new files are generated, beyond intermediate files (e.g. SAM files). The values are in the ‘Abundance’ field of final_outputs/marker_contig_map.tsv. 5.5 Tutorial steps Connect to your group’s server, then move to the directory /data/ts_tutorial. cd /data/ts_tutorial/ This tutorial requires many fastq and fasta formatted files, that are subsetted versions of the originals. They were created by searching metagenome assemblies and reads for XmoA then pulling out all sequences that matched into new files. We are going to save them in a new directory to keep ts_tutorial organized. Create a new directory called SI072_data and download the data to it. mkdir SI072_data cd SI072_data wget https://raw.githubusercontent.com/EDUCE-UBC/MICB425/cml-dev/data/SI072_abundance_files.txt wget -i SI072_abundance_files.txt We can move back out into the /data/ts_tutorial/ directory again to run the TreeSAPP commands. cd .. We will begin by classifying XmoA sequences found in the metagenome contigs. Since these are nucleotide sequences representing random stretches of DNA from the microbial community, treesapp assign will begin by predicting open reading frames (ORFs) from these. TreeSAPP will then classify the amino acid sequences for each of the predicted ORFs. Once the XmoA sequences are classified from these ORFs we can begin to generate the relative abundance values for the XmoA sequences. Assign taxonomic labels to Saanich Inlet metagenomic contigs using the updated XmoA reference package with treesapp assign. treesapp assign \\ -n 4 \\ --trim_align \\ --refpkg_dir XmoA_MAG_update/final_outputs/ \\ --fastx_input SI072_data/SI072_MetaG_contigs.fasta \\ --output SI072_MetaG_contigs_XmoA_assign/ Now we’ll need to access the processed data generated by treesapp assign in SI072_MetaG_contigs_XmoA_assign/. treesapp abundance will access the ORFs in SI072_MetaG_contigs_XmoA_assign/intermediates/orf-call/SI072_MetaG_contigs_ORFs.fna and pass these to bwa mem for sequence alignment. Due to this, the flag ‘--delete’ should not be used with treesapp assign if you want to eventually run treesapp abundance as the intermediates directory would be removed. We will begin by calculating TPM for the metagenome reads. The reads we are using to calculate these values are paired-end meaning that the there are two reads to represent each sequenced DNA fragment. These two reads, in the case of the metagenomic data, are split across two files: one for the reads sequenced in the forward direction and another for the reads sequenced in the reverse. Their extensions are ‘.1.fq.gz’ and ‘.2.fq.gz’, respectively. Therefore, we must use the parameters ‘--reads’ and ‘--reverse’ to point TreeSAPP towards these files. You’ll notice that we didn’t list out seven files for each, either; we used a wildcard character (the asterisk). For the forward reads, the shell will interpret this as all files within the SI072_data directory that begin with ‘SI072_’ and end with ‘m_pe.1.fq.gz’. You can test this expansion using the ls command. ls SI072_data/SI072_*m_pe.1.fq.gz We would like to replace the current abundance values from treesapp assign (set to 1) with the new TPM values, so we will set the ‘--report’ parameter to ‘update’. Finally, we can specify that we want TPM values with --metric tpm. Although, ‘tpm’ is the default so this isn’t necessary. Run treesapp abundance to overwrite the previous abundance values with the TPM values calculated from each of the seven SI072 datasets. treesapp abundance \\ -n 4 \\ --treesapp_output SI072_MetaG_contigs_XmoA_assign/ \\ --reads SI072_data/SI072_*m_pe.1.fq.gz \\ --reverse SI072_data/SI072_*m_pe.2.fq.gz \\ --report update \\ --metric tpm Now we’re going to generate TPM values for the seven matching metatranscriptome datasets. You will notice the format of these FASTQ files is different from the metagenomes. All of the reads for each sample are contained in a single file, and this is referred to as interleaved FASTQ format. Since there is no file for the reverse reads we can just use the ‘--reads’ parameter. Another key difference is we’re setting the ‘--report’ parameter to ‘append’. This is because we don’t want to overwrite the TPM values we just generated for the metagenomes. Instead, we want the new metatranscriptome values to be added to SI072_MetaG_contigs_XmoA_assign/final_outputs/marker_contig_map.tsv, so in the end the classification table will hold TPM values for both the metagenomes and metatranscriptomes. Use treesapp abundance to calculate TPM values from the seven metatranscriptomes. treesapp abundance \\ -n 4 \\ --treesapp_output SI072_MetaG_contigs_XmoA_assign/ \\ --reads SI072_data/SI072_*m_MetaT_QC_Filtered.fq.gz \\ --pairing pe \\ --metric tpm \\ --report append The next tutorial will cover visualizing the TreeSAPP classifications. For this we also want the functional annotations that we generated in the last tutorial. Run treesapp layer to annotate the XmoA query sequences with their respective paralog. treesapp layer \\ -o SI072_MetaG_contigs_XmoA_assign/ \\ --refpkg_dir XmoA_MAG_update/final_outputs/ \\ -c XmoA_colours/XmoA_Function_colours_style.txt That’s it! You’re now a seasoned veteran of TreeSAPP. 5.6 Use your group’s reference package to calculate abundances Continue to work with your group’s reference package in the directory /data/&lt;gene name&gt;. Visualize the appropriate outputs with iTOL. "],["the-saanich-inlet-data-set.html", "A The Saanich Inlet data set A.1 Description A.2 Data on the server A.3 Description of input data A.4 Methods", " A The Saanich Inlet data set A.1 Description We will work with real-world data collected as part of an ongoing oceanographic time series program in Saanich Inlet, a seasonally anoxic fjord on the East coast of Vancouver Island, British Columbia: FIGURE A.1: The Saanich Inlet Figure A.1 shows a map of Saanich Inlet indicating conventional sample collection stations (S1-S9). The data used in this tutorial (sourced from S3, Cruise 72) include various geochemical measurements and the genomic and transcriptomic data of microbial samples at depths 10, 100, 120, 135, 150, 165 and 200 m. For more details about these data, see (10), and for more detailed information on the environmental context and time series data, see (11). A.2 Data on the server The data is located on the MICB425 server at /mnt/datasets/saanich/. /mnt/datasets/saanich/ ├── [ 0] directory_structure.txt ├── [492M] MAGs │ └── [492M] Concatenated │ └── [492M] All_SI072_Metawrap_MAGs.fa ├── [3.5G] MetaG_Assemblies │ ├── [630M] SI072_100m_contig.fa │ ├── [525M] SI072_10m_contig.fa │ ├── [571M] SI072_120m_contig.fa │ ├── [505M] SI072_135m_contig.fa │ ├── [396M] SI072_150m_contig.fa │ ├── [748M] SI072_165m_contig.fa │ └── [219M] SI072_200m_contig.fa ├── [ 64G] MetaG_Trim_QC_Reads │ ├── [4.7G] SI072_100m_pe.1.fq.gz │ ├── [4.7G] SI072_100m_pe.2.fq.gz │ ├── [4.2G] SI072_10m_pe.1.fq.gz │ ├── [4.2G] SI072_10m_pe.2.fq.gz │ ├── [4.2G] SI072_120m_pe.1.fq.gz │ ├── [4.2G] SI072_120m_pe.2.fq.gz │ ├── [4.4G] SI072_135m_pe.1.fq.gz │ ├── [4.4G] SI072_135m_pe.2.fq.gz │ ├── [4.8G] SI072_150m_pe.1.fq.gz │ ├── [4.7G] SI072_150m_pe.2.fq.gz │ ├── [6.5G] SI072_165m_pe.1.fq.gz │ ├── [6.4G] SI072_165m_pe.2.fq.gz │ ├── [3.3G] SI072_200m_pe.1.fq.gz │ └── [3.3G] SI072_200m_pe.2.fq.gz ├── [ 54G] MetaT_Raw_Reads │ ├── [8.9G] SI072_100m_MetaT_QC_Filtered.fastq.gz │ ├── [6.4G] SI072_10m_MetaT_QC_Filtered.fastq.gz │ ├── [6.8G] SI072_120m_MetaT_QC_Filtered.fastq.gz │ ├── [7.2G] SI072_135m_MetaT_QC_Filtered.fastq.gz │ ├── [10.0G] SI072_150m_MetaT_QC_Filtered.fastq.gz │ ├── [8.7G] SI072_165m_MetaT_QC_Filtered.fastq.gz │ └── [6.0G] SI072_200m_MetaT_QC_Filtered.fastq.gz ├── [181M] SAGs │ └── [181M] Concatenated_Med_Plus │ └── [181M] Saanich_Med_Plus_SAGs.fasta └── [ 42K] seq2lineage_Tables ├── [ 17K] Med_Plus_SAGs_GTDB_Taxonomies.tsv └── [ 25K] SI072_MAGs_All_GTDB_taxonomies.tsv 122G used in 8 directories, 33 files A.3 Description of input data List of directories and their contents MAGs Within the Concatonated subdirectory, there is a single All_SI072_Metawrap_MAGs.fa fasta file which you will use with both treesapp assign and treesapp update. After the MAGs were generated with the MetaWrap pipeline (12) (see Methods), sample IDs were added to the contig headers of each MAG produced from each SI072 sample depth. The individual MAGs were then concatenated into this file. MetaG_Assemblies This directory contains the seven assembled metagenomic contigs for each SI072 sample depth. These files will be used for the treesapp assign and abundance tutorials. These files were generated by assembling the trimmed and quality controlled reads that were generated by the Illumina Sequencer. MetaG_Trim_QC_Reads This directory contains fourteen fastq files which contain the paired-end forward and reverse metagenomic reads for each SI072 sample depth. These trimmed and QC’d fastqs were generated by processing the raw reads through the Megahit workflow described below. You will use these files for treesapp abundance to get the metagenomic abundance of your assigned genes. MetaT_Raw_Reads This directory contains seven filtered and QC’d metatranscriptome fastq files for each SI072 Sample depth. These files are paired end and interleaved. These files we provided by the the JGI and generated based on the methodology below. You will use these files in treesapp abundance to calculate the metatransciptomic abundances of each gene of interest. SAGs Within the Concatenated_Med_Plus subdirectory, there is a single Saanich_Med_Plus_SAGs.fasta file which you will use with both treesapp assign and treesapp update. After the MAGs were generated with the SAG Assembly and Decontamination Workflow (13–16) (see Methods), sample IDs were added to the contig headers of each MAG produced from each SI072 sample depth. The individual MAGs were then concatenated into this file. seq2lineage_Tables This directory contains two files that will be used for treesapp update. One file contains the lineage information from the MAGs, and the other contains information for the SAGs. These tables were generated by taking each separate MAG and SAG respectively and passing them through the Genome Taxonomic Database Toolkit classify workflow (see Methods). Then, the first two columns of the archaeal and bacterial summary files were taken and combined into each of these files. A.4 Methods Water was collected from various depths at Saanich Inlet and filtered through a 0.22 µm Sterivex filter to collect biomass. Total genomic DNA and RNA were extracted from these filters. RNA was reversed transcribed into cDNA and both genomic DNA and cDNA were used in the construction of shotgun Illumina libraries. Sequencing data were generated on the Illumina HiSeq platform with 2x150bp technology. For more in-depth sampling and sequencing methods, please see (17). A.4.1 Quality filtering of reads The resulting reads were processed and quality controlled at the Joint Genome Institute using the IMG/M pipeline. Quality filtering was performed with Trimmomatic (v.0.35, documentation) (13) with default parameters except: LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 A.4.2 Assembly MEGAHIT (v.1.1.3, documentation) (18) assembled MAGs using with default parameters except for: --k-min 27 --k-step 10 --min-contig-len 500 "],["shell-cheat-sheet.html", "B Shell cheat sheet", " B Shell cheat sheet TABLE B.1: Shell cheat sheet Command Description cd Change directory .. to parent directory ~ to home directory - to last visited directory ls List files in directory -l as list ssh &lt;username&gt;@&lt;server address&gt; Make a secure connection to server pwd Print working directory less &lt;filename&gt; Look at text file Press Help for navigation Press Quit to leave scp &lt;source&gt; &lt;target&gt; Copy files between local and server Give file path on server as &lt;user&gt;@&lt;server address&gt;:&lt;file path&gt; exit Close session (either to server or to local terminal) history Get list of command history Follow with !&lt;number&gt; to execute that corresponding command again -a &lt;filename&gt; save a history of your current session to a text file to document your work man &lt;command&gt; help &lt;command&gt; &lt;command&gt; --help Unfortunately, it is impossible to predict how to get help for a &lt;command&gt;, try any one of these until one works screen Create a virtual terminal that continues to run jobs even when your connection to server terminates -S &lt;session name&gt; create a session with &lt;session name&gt; -ls list all running sessions -r &lt;session name&gt; resume a session To leave a session but keep it running, first ctrl+activate commands to screen, then detach "],["references.html", "C References", " C References "]]
