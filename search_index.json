[["index.html", "Gene-centric mapping of microbial community structure and function 2020.21 MICB425 Mirobial Ecological Genomics Capstone project Overview", " Gene-centric mapping of microbial community structure and function 2020.21 MICB425 Mirobial Ecological Genomics Capstone project Stephan Koenig, Kim Dill-McFarland, Connor Morgan-Lang, Ryan McLaughlin, Julia Anstett, Resmi Radhamony, Sean Crowe and Steven Hallam version March 17, 2021 Overview This document introduces bioinformatics workflows useful in gene-centric mapping of functional and phylogenetic anchors encoded in microbial genomes sourced from natural and engineered environments. Part I outlines the motivation and insights afforded by the use of these workflows to study uncultivated microbial community structure and function. Part II provides hands-on tutorials to learn two effective tools for gene-centric analysis, TreeSAPP and iTOL. Part III described your capstone project to explore primary metagenomic and metatranscriptomic data collected from the Saanich Inlet water column spanning a defined nutrient and energy gradient. "],["exploring-the-microcosmos.html", "1 Exploring the microcosmos 1.1 Background 1.2 Using multi-omic data to reconstruct distributed networks of metabolite exchange 1.3 TreeSAPP", " 1 Exploring the microcosmos 1.1 Background We live in a world dominated by microbial life. Accounting for bacteria and archaea (prokaryotes) alone, there are an estimated 1030 cells occupying the biosphere. For most of Earth’s history this microcosmos has been driving matter and energy transformations through distributed networks of metabolite exchange resulting in global biogeochemical cycles and symbiotic interactions that create and sustain the conditions for multicellular existence, including our own. Recent advances in high-throughput sequencing and mass spectrometry platforms have enabled us to develop more quantitative insights into the structure and function of these networks at the individual, population and community levels of biological organization. The resulting data sets have revealed both incredible diversity and ecological resilience, and provided an opportunity to develop predictive models and sustainable biotechnologies with potential to transform the way humans interact with the natural world and one another. Despite the power and the promise of this new perception, we exist dangerously close to upsetting the planetary boundaries that have promoted successful human expansion over the past 20,000 years. Global climate change is one manifestation of the cost we have paid in our pursuit for material and energy resources, but there are others including biodiversity loss through habitat destruction, rampant pollution, and imbalances in integral element cycling of nitrogen and phosphorous. Given the increasing availability of data sets describing microbial community structure and function in the world around us, we have an opportunity to learn from this information using bioinformatic tools and approaches. For this course we are going to focus on one manifestation of climate change related to dissolved oxygen (DO) loss in the ocean using a model ecosystem as a source of multi-omic (DNA and RNA) and geochemical parameter information over space and time. Oxygen minimum zones (OMZs) are widespread areas of low dissolved oxygen (DO) in subsurface waters. Climate change resulting in increased stratification and reduced oxygen solubility in warming waters leads to OMZ expansion. Consequently as oxygen levels decline, the microbial communities inhabiting OMZ waters shift their metabolisms to utilize alternative terminal electron acceptors. This results in the production of climate active trace gases such as nitrous oxide (N2O) and methane (CH4). Specifically, we will study the effects of changing levels of oxygen on communities of bacteria and archaea inhabiting the Saanich Inlet water column. Saanich Inlet situated on the coast of Vancouver Island British Columbia is a seasonally anoxic fjord that provides a biodynamic perspective on OMZ expansion. From a systems ecology perspective OMZs provide useful environmental contexts in which to study coupled biogeochemical cycling through distributed metabolic networks, especially integration of the carbon, nitogen and sulfur cycles. By combining multi-omics amd geochemical parameter information from OMZs it becomes possible to evaluate regulatory and response dynamics of microbial communities to changing DO levels. For example, because OMZs are hotspots for nitrogen loss processes reconstructing the nitrogen cycle as a distributed metabolic process has potential to shed new insight into microbial controls on matter and energy transformations integral to ocean health and climate balance. Genes encoding key steps in the nitrogen cycle are well defined (Figure 1.1) providing a basis for functional anchor screening to determine their distribution across the Tree of Life. FIGURE 1.1: Nitrogen cycle 1.2 Using multi-omic data to reconstruct distributed networks of metabolite exchange The nitrogen cycle is just one aspect of the distributed metabolic network that defines microbial interaction space. Throughout this capstone project you will have the opportunity to explore this space using a gene-centric approach. This approach is based on the identification and quantification of phylogenetic or functional anchor genes that represent key microbial players and metabolic pathways in the system under study. In a big picture sense, we want to use these data to answer three foundational questions with respect to microbial community structure and function: Who is there? What are they doing? How do they respond to change? Biological information flow can be described as a process of converting genotypic information encoded in the DNA base pairs of the genome transcribed into RNA messages that are translated into proteins at the level of the ribosome. These proteins in turn go on to catalyze metabolic transformations and regulatory dynamics that ultimately give rise to phenotypic expression, adaptation and response. This flow of information is formally referred to as the Central Dogma of Biology. Genomic sequence information provides a basis for determining the types of microorganisms present in a sample and to infer metabolic potential at the individual, population and community levels of biological organization. Because DNA can persist in the environment for longer periods of time than RNA or protein, we can also use the abundance of gene X or gene Y to tell us about prior metabolic activity e.g. gene abundance is a proxy for process. We can use gene abundance information in numerical models to infer metabolic flux through a given pathway because the abundance of gene X is proportional to the replication of the genome in which it resides. Genomic information is also more robust to sampling noise as we collect and process samples for downstream analysis. For information on gene-centric modelling incorporating DNA, RNA and protein information in Saanich Inlet see this paper (1). While genomic information tells us about metabolic potential, the transcriptome is a guide to action or gene expression. We can to a certain extent use this information to identify who is there but more often it is used to indicate which pathways are active at the time of sampling. Transcriptomic data can open a window into response patterns along environmental gradients with the caveat that its short-lived nature is less robust to sampling noise. There is no guarantee that the presence of transcripts for a given gene X are converted into protein. However, because prokaryotes couple transcription to translation we typically infer a direct relationship. For information on relationships between DNA, RNA and protein in Saanich Inlet see this paper as well (2). 1.3 TreeSAPP For this project you will be implementing a software application called Tree-based Sensitive and Accurate Protein Profiler (TreeSAPP) (3). Given the current set of reference packages available, you are in position to reconstruct key steps in selected biogeochemical cycles e.g. carbon, nitrogen, sulfur along defined redox gradients in Saanich Inlet. TreeSAPP takes either metagenomic or metatranscriptomic reads and aligns them to reference packages representing phylogenetic or functional anchor genes of interest. These reference packages are constructed from trusted sources and consist of a phylogenetic tree, multiple sequence alignment, hidden markov model and taxonomic lineage information. Reference packages can be updated and refined as new sequence information becomes available including isolate reference genomes, metagenome assembled genomes (MAGs) and single-cell amplified genomes (SAGs) thereby improving the precision of taxonomic placement. TreeSAPP outputs can be readily visualized using the interactive Tree of Life (iTOL) (4) or plotted in R to make beautiful and informative data visualization products. "],["a-tutorial-for-using-treesapp.html", "2 A tutorial for using TreeSAPP 2.1 A typical TreeSAPP workflow 2.2 Genes for used for creating reference packages 2.3 Tools 2.4 Data", " 2 A tutorial for using TreeSAPP You will work through a common workflow of TreeSAPP in a series of tutorials both with an example gene (XmoA) to familiarize yourself with the tools and then you will repeat the steps with a gene assigned to your group for which no reference package has ever been created. You will document your steps for the new reference package in Problem Set 5. 2.1 A typical TreeSAPP workflow Acquiring golden data. Creating a Reference Package For TreeSAPP. [Classifying unknown sequences with TreeSAPP and updating a reference package]. [Calculating relative abundance of meta’omic data]. 2.2 Genes for used for creating reference packages 2.2.1 XmoA The protein family we will be focusing on is that of the copper-containing membrane-bound monooxygenases (5). This family contains particulate methane monooxygenase (pMMO) and ammonia monooxygenase (AMO) and well be building a reference package for the alpha subunits of these enzymes called XmoA. All groups will work through this example. 2.2.2 Group-assigned genes You will created a reference package and perform the other steps only for the gene that has been assigned to you. RefPkg Full Protein Name Pathway Cycle TIGRFAM PFam EggNOG Other Database EC number Reading cbbS ribulose bisphosphate carboxylase, type III (Ribulose bisphosphate carboxylase small chain) Carbon fixation C TIGR03326 PF00101 COG4451 NA 4.1.1.39 NA ACoA ACoA_crb (acetylCoA carboxylase) Carbon fixation C TIGR03182 PF00676 COG1071 NA 1.2.4.1 NA Hzs hydrazine synthase Annamox N NA PF18582 COG3391 NA 1.7.2.7 https://www.nature.com/articles/nature10453 https://www.frontiersin.org/articles/10.3389/fmars.2019.00027/full NirB nitrite reductase (NADH) large subunit Dissimilitory nitrate reduction (DNRA) N TIGR02374 NA COG1251 NA 1.7.1.15 NA NirD nitrite reductase (NADH) small subunit Dissimilitory nitrate reduction (DNRA) N TIGR02378 NA COG2146 NA 1.7.1.15 NA NrfA nitrite reductase (cytochrome c-552) Dissimilitory nitrate reduction (DNRA) N TIGR03152 NA COG3303 NA 1.7.2.2 NA NrfH cytochrome c nitrite reductase, small subunit Dissimilitory nitrate reduction (DNRA) N TIGR03153 NA COG3005 NA 1.7.2.2 NA APS_red adenylylsulfate reductase, thioredoxin dependent Sulfur metabolism S TIGR02055 PF01507 COG1404 NA 1.8.99.2 NA BacRho Bacteriorhodopsin Energy production and conversion NA NA PF01036 COG5524 NA NA https://science.sciencemag.org/content/289/5486/1902/tab-pdf https://www.nature.com/articles/s41467-018-07840-4 2.3 Tools 2.3.1 Shell Please review previous tutorials. Use this short cheat sheet for commonly used commands. 2.3.2 TreeSAPP Tree-based Sensitive and Accurate Phylogenetic Profiler (TreeSAPP) (3) can be found on GitHub including an excellent wiki with additional information on each of the treesapp subcommands. We also provide you with a list of existing TreeSAPP reference packages. 2.3.3 iTOL Interactive Tree Of Life (iTOL) (4) is a browser -based tool that allows you to visualize data generated in TreeSAPP as a phylogenetic tree with additional annotations. 2.4 Data Other than [The Saanich Inlet data set] already located on the server, you will download data from different databases: FunGene, the functional gene pipeline and repository. EggNOG "],["acquiring-golden-data.html", "3 Acquiring golden data 3.1 The golden standard 3.2 What databases can I retrieve sequences from? 3.3 XmoA example 3.4 Alternative sources 3.5 Data access hazards 3.6 Validation", " 3 Acquiring golden data Golden data in the context of biological sequence analysis are those that come from well-curated open-source databases. These data have been used to create all TreeSAPP reference packages to date, and they should be used to create all future reference packages. But what does “well-curated” mean, and how can you identify data that would meet this gold standard? 3.1 The golden standard The field of genomics is blessed with an abundance of reference data. In fact, it is not uncommon for biologists and bioinformaticians alike to gripe over the increased run-time of computational analyses caused by steps that include comparisons to such large reference databases. Not all of these data are, however, of the same quality. The vast majority have been automatically curated using algorithms with known shortcomings, and only a small portion have been manually curated with verified functional characterization. These latter data are the ones we consider well-curated or golden. 3.2 What databases can I retrieve sequences from? One of the most comprehensive and reputable biological sequence databases is SwissProt. The protein sequences curated within SwissProt can be accessed and downloaded through the UniProt Knowledgebase by selecting “Swiss-Prot” under the “UniProtKB” panel on the left of the landing page. You can submit queries for a protein family through their search bar and add filters to the query using their advanced search options. For example, you can search for reviewed RuBisCO sequences by entering the query ‘rubisco taxonomy:“Bacteria [2]” AND reviewed:yes’. Throughout the development of TreeSAPP, I have frequented FunGene, the functional gene pipeline and repository. This database provides curated sequences (of varying reliability) for many popular functional and taxonomic anchor genes. FunGene is also great since they have profile hidden Markov models (HMMs) for every gene available. In bioinformatics, HMMs are commonly used to represent a group of homologous amino acid sequences, often belonging to the same protein family, as a probabilistic model. They are inferred by modelling the amino acid character frequencies and motifs along the length of multiple aligned sequences. Additionally, by providing a sense of the full-length protein, they allow users to filter the sequences based on the percentage of an HMM covered. Since we’re building a reference tree, only include roughly full-length sequences by setting that minimum HMM coverage parameter between 60 and 90%. EggNOG is another source of curated orthologous groups. The breadth of families available here is astounding and more often than not they do have the sequences you’re looking for. There are a couple of benefits to accessing data from EggNOG. The first is they use a common identifier format. Using the correct identifier for a protein family, a single search will yield all available amino acid sequences belonging to that protein family or COG. What I’ve found handy is first looking for the Clusters of Orthologous Gene (COG) identifier on NCBI’s Conserved Domains database. Then I’d use that identifier to search for the sequences I’m interested in on EggNOG. The second benefit is the quality of their automated annotation pipeline. With every version of EggNOG, the entire set of protein sequences is clustered and the orthologous groups are defined de novo. This prevents incorrect legacy annotations from propagating to new sequences. Unfortunately, the breadth of taxa covered by EggNOG is limited to just 5,090 organisms. In many cases, this is good enough to build a “seed” reference package, especially if you’re building a reference package of a well-conserved—or housekeeping—gene. Yet, there are plenty of scenarios where the number of sequences downloaded is just too few for your objective, and a more comprehensive reference package is required—more on that below. In addition to these general and all-encompassing databases, there are smaller curated databases that are independently maintained. These tend to be gene- or function-specific and, as long as they’re still maintained, highly reliable. Perhaps the most notable of these is the Carbohydrate Active enZYmes (CAZy) database. The maintainers of CAZy constantly screen new sequenced from GenBank and sort any hits into different families based on their putative biochemical characterization. 3.3 XmoA example To show you how to access data from the FunGene database, we will download the alpha subunit sequences of the enzymes particulate methane monooxygenase (PmoA) and ammonia monooxygenase (AmoA) that are used in the treesapp create tutorial. First, navigate to http://fungene.cme.msu.edu/. This front page organizes the genes into their respective functional groups. The sequences we’re interested in are involved in biogeochemical cycling, so look under that panel for “AmoA” and ‘PmoA’. As you can see, AmoA are broken up into four different entries: “amoA_AOA”, “amoA_AOB”, “amoA_AOB_like”, and “amoa_comammox”. We will download the sequences from only “amoA_AOA” and “amoA_AOB”, so let’s begin alphabetically with “amoA_AOA”. For these sequences, we will limit them to just sequences derived from isolate genomes of which the functional and taxonomic annotations are more reliable. To do this, go to “Display Options” in the top right. Click the “Isolate” option then “Update”. We also want the sequences that are more-or-less full-length. Click on “Show/Hide filter options”, fill the “Minimum HMM Coverage” parameter with “80” (or some other number between 60 and 90), then “Filter”. That’s all the filtering we’re going to do here. To add the sequences to your cart, click “Select All Sequences” then “Begin Analysis”. Deselect “Aligned” then click the “Download” button. Repeat with the above steps with the other genes amoA_AOB and PmoA. 3.4 Alternative sources EggNOG and FunGene are my favourite sources, though this leaves out the majority of biological sequence databases for no reason other than simplicity. IMG, KEGG, PFam, and other similar databases are all great but they lack an API to retrieve lineage information, and therefore this needs to be provided in a separate table. Details on this table’s format and how to provide it can be found under the treesapp create wiki page. 3.5 Data access hazards Accessing the fraction of well-curated data from multiple databases is not trivial. Perhaps the most obvious reason for this are unrelated genes with shared names. For example, the gene product of mcrB in E. coli widely refers to 5-methylcytosine-specific restriction enzyme B, but in the Archaea, it would refer to the beta subunit of methyl-coenzyme M reductase—a completely unrelated protein. This is an inevitability in a field of science as broad as biology, where scientists that are responsible for naming genes cannot possibly be aware of all gene names in circulation. Another issue can be genes or proteins with synonyms, making the search for these data more complex. In these cases, you may need to search multiple databases with several queries in order to access all the sequences belonging to the same protein family. On your local computer, create a new directory called Xmoa_sequences inside of your home directory by using a file browser, i.e. File Explorer (Windows 10) or Finder (macOS). From the databases, download any reference sequences you identified and save them in Xmoa_sequences. Connect to your group’s server. We will move to the directory /data (if it is not your working directory already), create a new directory called ts_tutorial and then move into it. cd /data/ mkdir ts_tutorial cd ts_tutorial Open a second terminal window that is connected to your local computer, then copy the reference sequences from your computer to your server. scp -r &lt;path to Xmoa_sequences&gt; root@&lt;server address&gt;:/data/ts_tutorial 3.6 Validation There are a number of quality control measures that can be taken to ensure the functional characteristics are as expected. 3.6.1 Basic BLAST: The first method for validating a set of candidate reference sequences could be to use the web-based Basic Local Alignment Search Tool available through the NCBI. Submit a FASTA file containing your sequences to Protein BLAST (blastp) with an appropriate database. To further reduce the processing time, you can restrict the reference sequences to specific taxa or use different algorithms. One thing to note is the query size limit - blastp will accept only FASTA files containing fewer than 100,000 characters. So, it is a good idea to take a representative sample or cluster the sequences before submitting the job. EggNOG-mapper: If you didn’t download your query sequences from the EggNOG database, a good resource to check your sequences is EggNOG mapper. It will annotate your query sequences against the EggNOG database and serve the result in several formats. 3.6.2 Advanced Phylogenetic inference: Try building a phylogeny from the candidate reference sequences and see whether there are any anomolously long branches between clades. hmmsearch across PFam database: Got some time to kill? Try aligning your candidate reference sequences to all profile HMMs in the PFam database! This will need to be done on the command-line and you will need to download Pfam-A.hmm.gz from the PFam ftp site. "],["treesapp-create.html", "4 Creating a Reference Package For TreeSAPP 4.1 Introduction and Goals 4.2 Making the reference package 4.3 Testing the purity of the reference package 4.4 Looking at tree of reference package with iTOL 4.5 Building your group’s reference package", " 4 Creating a Reference Package For TreeSAPP 4.1 Introduction and Goals This tutorial is meant for users who would like to analyze a gene family lacking an existing TreeSAPP reference package (refpkg). It is also useful to those who would rather start over than use treesapp update to improve an existing refpkg. This tutorial will cover the following subcommand of treesapp: create, package, purity and assign. TreeSAPP will automatically determine the taxonomic lineage assigned to each sequence if these are NCBI accessions. For ways to provide lineage information for as-of-yet unaccessioned sequences please refer to the TreeSAPP Wiki page Building reference packages with TreeSAPP. TreeSAPP does not currenty support GTDB taxonomies although efforts are being made to determine feasibility of this approach. 4.2 Making the reference package When building reference packages if you can source manually curated sequences—such as those hosted by SwissProt—always use those. There are plenty of sources for curated PmoA &amp; AmoA sequences. More details on choosing databases for retrieving sequences can be found on the TreeSAPP wiki. In the [Aquiring golden data] tutorial, PmoA &amp; AmoA sequences were downloaded from TIGRFAM, EggNOG, and FunGene. For now we’ll just use the TIGRFAM seed sequences and EggNOG sequences as these are best curated. Let’s call this our seed reference package. The steps involved are: Connect to your group’s server and continue to work in the /data/ts_tutorial directory. cd /data/ts_tutorial Optional, on the server: If you could not download the reference sequences of XmoA yourself, download xmoa_file_list.txt—a list of the necessary fasta files—with wget to the ts_tutorial directory, then run wget again to retrieve each file within this list. cd /data/ts_tutorial wget https://raw.githubusercontent.com/hallamlab/TreeSAPP/master/docs/xmoa_file_list.txt wget -i xmoa_file_list.txt Create the input FASTA file by combining the EggNOG and TIGRFAM reference into a single file using cat. cat stands for concatentate, i.e. the files are pasted together. The output of cat is funneled with the &gt; symbol to a &lt;new file&gt;, i.e. cat &lt;file 1&gt; &lt;file 2&gt; &gt; &lt;new file&gt; cat ENOG5028JPK_EggNOGv5.faa TIGR03080.faa arCOG08676_EggNOGv5.faa &gt; XmoA_seed.faa There are 76 well curated PmoA and AmoA fasta sequences in this file Let’s look briefly at the newly generated fasta file. less XmoA_seed.faa You will notice, that they are lines that start with a &gt; that gives the name of a sequence followed by a line containing the actual nucleotide sequence itself. We can count and confirm the number of sequences in the fasta file by counting those &gt; using grep. grep is an incredibly powerful tool to find matching text patterns (using a format called “regular expression”) and is beyond the scope of this tutorial. The code below searches for a &gt; at the beginning of the line (defined with \"^&gt;\") of the file XmoA_seed.faa and counts each occurrence due to the option -c. grep -c &quot;^&gt;&quot; XmoA_seed.faa Use submodule treesapp create to build the XmoA reference package with different arguments (see visualization of the create workflow). To speed things along we’ll be using FastTree to infer the phylogeny and will skip bootstrapping with --fast. To remove potential redundant sequences, we’ll cluster the candidate reference sequences at 97% similarity using the argument -p. When clustering the candidate sequences TreeSAPP would normally ask which sequence to use for the representative of the cluster. This can be handy in cases when some sequences are better annotated and/or are especially important. To speed things up even more the flag --headless will prevent these requests. This command will take ~2 minutes to complete. treesapp create \\ --fast \\ --headless \\ --overwrite \\ --cluster \\ --trim_align \\ -n 4 \\ -m prot \\ -p 0.97 \\ --fastx_input XmoA_seed.faa \\ -c XmoA \\ --output XmoA_seed The final reference package file is located in XmoA_seed/final_outputs/XmoA_build.pkl. This file contains all the individual components of a reference package (multiple sequence alignment, profile HMM, phylogenetic tree, taxonomic lineages) as well as some other data. These files were bundled up using the joblib Python library. They can be accessed individually using the submodule treesapp package. Replace the current refpkg_code Z1111 with unique identifier N0102 (if you plan on just using this one reference package then you don’t really need to worry about changing it). treesapp package edit \\ refpkg_code N0102 \\ --overwrite \\ --refpkg_path XmoA_seed/final_outputs/XmoA_build.pkl We can also modify the reference package’s description while we’re here. treesapp package edit \\ description &quot;Alpha subunits of copper membrane monooxygenase enzymes&quot; \\ --overwrite \\ --refpkg_path XmoA_seed/final_outputs/XmoA_build.pkl 4.3 Testing the purity of the reference package We will determine whether there were any mis-annotated sequences that were included in our reference package with treesapp purity. To do this, we take a well-curated database and attempt to classify sequences in it using treesapp assign. The results are then analysed and displayed for the user to evaluate. The TIGRFAM database is fairly comprehensive, representing 4488 different groups in version 15, and by using just the TIGRFAM seed sequences (TIGRFAM_seed_named.faa) we can be fairly sure we won’t be evaluating our classifications with mis-annotated sequences. treesapp purity \\ --trim_align \\ -m prot \\ -n 4 \\ -r XmoA_seed/final_outputs/XmoA_build.pkl \\ --extra_info TIGRFAM_info.tsv \\ -i TIGRFAM_seed_named.faa \\ --output XmoA_purity The important bit of the output should look like this Summarizing assignments for reference package XmoA Ortholog Hits Leaves Tree-coverage Description ——————————————————————————– TIGR03080 3 4 11.1 methane monooxygenase/ammonia monooxygenase, subunit A From this summary it appears that the reference package classified three homologous sequences that were placed at leaf nodes in the tree (i.e. they’re closely related) and the sequences were all from the family “TIGR03080”, also known as “methane monooxygenase/ammonia monooxygenase, subunit A”. In all, we’re probably good to proceed! 4.4 Looking at tree of reference package with iTOL We have now created a phyogenetic tree for XmoA, but if we would visualize it, we would only see TreeSAPP identifiers (such as 1_XmoA, 2_XmoA) as labels on the tree which y themselves are not meaningful. In order to assign leaf labels to the refpkg iTOL tree we will use treesapp assign function. Assign reference sequences to reference package to generate tree with labels. treesapp assign \\ -n 4 \\ -m prot \\ --trim_align \\ --refpkg_dir XmoA_seed/final_outputs/ \\ --fastx_input XmoA_seed.faa \\ --output XmoA_seed_assign/ Transfer the iTOL_output directory in the treesapp assign output directory XmoA_seed_assign/iTOL_output to your local folder. scp -r root@&lt;server address&gt;:/data/ts_tutorial/XmoA_seed_assign/iTOL_output &lt;path to your local directory&gt; We can quickly and easily view the sequences phylogeny using iTOL. Navigate to https://itol.embl.de/ using a web browser and upload the file XmoA_complete_profile.jplace. This JPlace file contains both the phylogeny and the location of the placements that will be visualized. Next, navigate to the page displaying the phylogeny and click-and-drag the file XmoA_labels.txt into the iTOL window. This should convert the TreeSAPP identifiers (e.g. 1_XmoA) to more useful descriptions with the organism name and accession for each leaf node. Finally, turn on the “Phylogenetic Placements” dataset (right of the screen) and the figure should look identical to this figure below Figure 4.1. FIGURE 4.1: Phylogenetic tree of XmoA_seed refpkg. The red bubbles represent sequence placements with the size of the bubble indicating the number of placements on a branch. 76 sequences were classified and placed on 36 leaf nodes. 4.5 Building your group’s reference package Now create a reference package for the gene that was assigned to your group. On your computer: create a directory &lt;gene_name_sequences&gt; in your home directory and download any reference sequences for your gene you can find on the databases. On the server: In the directory /data, create a new directory &lt;gene name&gt;. On your computer: Copy the reference sequences from your computer to the directory /data/&lt;gene name&gt; on the server. On the server: Work in /data/&lt;gene name&gt; as you are creating your TreeSAPP outputs. On your computer: Whenever you have TreeSAPP outputs that can be visualized with iTOL, copy the files from the server to your computer to do so. "],["treesapp-reference-packages.html", "A TreeSAPP reference packages", " A TreeSAPP reference packages TABLE A.1: Available TreeSAPP reference packages Name Description Leaf nodes Pathway Cycle AA10 Auxiliary Activity family 10 699 Carbohydrate metabolism C GH101 Glycoside hydrolase family 101 113 Carbohydrate metabolism C GH102 Glycoside hydrolase family 102 727 Carbohydrate metabolism C GH103 Glycoside hydrolase family 103 1145 Carbohydrate metabolism C GH109 Glycoside hydrolase family 109 376 Carbohydrate metabolism C GH115 Glycoside hydrolase family 115 267 Carbohydrate metabolism C GH126 Glycoside hydrolase family 126 112 Carbohydrate metabolism C GH163 Glycoside hydrolase family 163 102 Carbohydrate metabolism C GH67 Glycoside hydrolase family 67 372 Carbohydrate metabolism C GH94 Glycoside hydrolase family 94 695 Carbohydrate metabolism C McrA Methyl coenzyme M reductase alpha subunit 424 Methanogenesis C McrA Methyl coenzyme M reductase alpha subunit 249 Methanogenesis C McrB Methyl coenzyme M reductase beta subunit 110 Methanogenesis C McrG Methyl coenzyme M reductase gamma subunit 123 Methanogenesis C PHAdeg Poly(hydroxyalkanoate) degradation enzymes 10 Plastics degradation C PL11 Polysaccharide lyase family 11 320 Carbohydrate metabolism C PuhA photosynthetic reaction center H subunit 47 Photosynthesis C PilA Type IV pilin N-terminus, including PilA 70 Direct interspecies electron transfer E HydA [FeFe] hydrogenase, group A, B1, B3 93 Hydrogenase H HgcA Methylmercury active enzyme, subunit A 108 NA Hg HgcB Methylmercury active enzyme, subunit B 122 NA Hg NapA Periplasmic nitrate reductase, large subunit 765 Denitrification N NifD nitrogenase molybdenum-iron protein alpha chain 926 Nitrogen fixation N NifH Nitrogenase iron protein [TIGR01287,EC:1.18.6.1] 660 Nitrogen fixation N NirK nitrite reductase (NO-forming) 325 Denitrification,Annamox N NirS nitrite reductase (NO-forming) / hydroxylamine reductase 511 Denitrification,Annamox N NorB nitric oxide reductase subunit B 460 Denitrification N NorC nitric oxide reductase subunit C 173 Denitrification N NosZ Nitrous-oxide reductase (TAT-dependent|Sec-dependent) 26 Denitrification N NxrA nitrate reductase / nitrite oxidoreductase, alpha subunit 658 Nitrification N NxrB nitrate reductase / nitrite oxidoreductase, beta subunit 648 Nitrification N XmoA Alpha subunits of copper membrane monooxygenase enzymes 37 Nitrification N PF00380a Ribosomal protein S9/S16 82 Translation NA PF00380b Ribosomal protein S9/S16 1065 Translation NA PF00410a Ribosomal protein S8 155 Translation NA PF00410b Ribosomal protein S8 1216 Translation NA PF00687a Ribosomal protein L1p/L10e family 192 Translation NA PF00687b Ribosomal protein L1p/L10e family 864 Translation NA PF00750a tRNA synthetases class I (R) 193 Translation NA PF00750b tRNA synthetases class I (R) 1317 Translation NA PF00900 Ribosomal family S4e 328 Translation NA PF01015 Ribosomal S3Ae family 101 Translation NA PF01092 Ribosomal protein S6e 169 Translation NA PF01157 Ribosomal protein L21e 74 Translation NA PF01200 Ribosomal protein S28e 129 Translation NA PF01280 Ribosomal protein L19e 281 Translation NA PF01409a tRNA synthetases class II core domain (F) 243 Translation NA PF01409b tRNA synthetases class II core domain (F) 891 Translation NA PF01655 Ribosomal protein L32 220 Translation NA PF01866 Putative diphthamide synthesis protein 229 Translation NA RpoB RNA polymerase beta subunit 697 Translation NA CysD sulfate adenylyltransferase (SAT), small subunit 93 Assimilatory sulfate reduction S CysH phosophoadenylyl-sulfate reductase [PF01507, EC:1.8.4.8|1.8.4.10] 710 Assimilatory sulfate reduction S CysI_Sir (assimilatory) sulfite reductase (NADPH) hemoprotein, beta subunit|ferredoxin dependent 1055 Assimilatory sulfate reduction S CysJ sulfite reductase [NADPH] flavoprotein, alpha-component [COG0369, EC:1.8.1.2] 474 Assimilatory sulfate reduction S CysN Sulfate adenylyltransferase (SAT), large subunit 1221 Assimilatory sulfate reduction S DsrAB Dissimilatory sulfite reductase, alpha and beta subunits 752 Dissimilatory sulfate reduction and oxidation S DsrC 341 Dissimilatory sulfate reduction and oxidation S Sat Sulfate adenylyltransferase [PF01747, EC:2.7.7.4] 254 Dissimilatory sulfate reduction and oxidation S SoxB S-sulfosulfanyl-L-cysteine sulfohydrolase [TIGR04486] 1012 SOX system S SoxY Thiosulfate oxidation carrier protein [TIGR04488,ENOG501RH4J] 364 SOX system S SoxZ Thiosulfate oxidation carrier complex protein [TIGR04490,ENOG501N097] 247 SOX system S "],["shell-cheat-sheet.html", "B Shell cheat sheet", " B Shell cheat sheet TABLE B.1: Shell cheat sheet Command Description cd Change directory .. to parent directory ~ to home directory - to last visited directory ls List files in directory -l as list ssh &lt;username&gt;@&lt;server address&gt; Make a secure connection to server pwd Print working directory less &lt;filename&gt; Look at text file Press Help for navigation Press Quit to leave scp &lt;source&gt; &lt;target&gt; Copy files between local and server Give file path on server as &lt;user&gt;@&lt;server address&gt;:&lt;file path&gt; exit Close session (either to server or to local terminal) history Get list of command history Follow with !&lt;number&gt; to execute that corresponding command again -a &lt;filename&gt; save a history of your current session to a text file to document your work man &lt;command&gt; help &lt;command&gt; &lt;command&gt; --help Unfortunately, it is impossible to predict how to get help for a &lt;command&gt;, try any one of these until one works screen Create a virtual terminal that continues to run jobs even when your connection to server terminates -S &lt;session name&gt; create a session with &lt;session name&gt; -ls list all running sessions -r &lt;session name&gt; resume a session To leave a session but keep it running, first ctrl+activate commands to screen, then detach "],["references.html", "C References", " C References "]]
